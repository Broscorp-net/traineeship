package net.broscorp.m_override_overload;

/**
 * Override - переопределение метода - это возможность подклассу иметь специфическую реализацию
 * родительского метода. Поставленая над методом анотация @Override сообщает компилятору что этот
 * метод переопределен и сообщает так же читающим код программистам.
 *
 * Анотация Override защищает нас от ошибки неправильно переопределить метод,
 * Если мы пометили метод как @Override и ошиблись в каком либо месте, например
 * указали неправильную сигнатуру — компилятор не пропустит нас.
 *
 * Если не поставить анотацию Override и имя метода будет таким же как в родительском классе.
 * Но будет другое возвращаемое значение или входящие аргументы другие то это уже будет
 * перегрузка метода Overload. и если в этом методе (перегруженом) будет ошибка нам тяжело будет
 * отловить ошибку так как мы думаем что переопределили его, а нет это
 * просто как дополнительный отдельный метод в классе наследнике. И компилятор молчит потому что,
 * ну имя одинаковое ну и что сигнатура то другая и анотации Override нет значит человек захотел отдельно метод
 * просто хочет все методы одним именем:))
 *
 * По сути Override служит для контроля успешности действия при сборке проекта.
 *
 * Есть ряд ограничений:
 * 1. Перерпеделенный метод должен иметь те же аргументы что и метод родительского класса.
 * 2. Переопределегный метод должен иметь такой же тип возвращаемого значения
 * что и метод родителдьского класса.
 * 3. Модификатор доступа не может быть более ограничен чем в методе родительского класса.
 * 4.Методы final не могут быть переопределены.
 * 5.Конструкторы нельзя переопределять.
 */

public class MathOperationSum implements MathOperation {

  @Override
  public double operation(double a, double b) {
    return a + b;
  }

  @Override
  public int operation(int a, int b) {
    return a + b;
  }

  @Override
  public Integer operation(Integer a, Integer b) {
    return a + b;
  }

  @Override
  public Double operation(Double a, Double b) {
    return a + b;
  }

  public Double operation(Double a, double b) {
    return a + b;
  }
}
