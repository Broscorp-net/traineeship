package net.broscorp.g_value_ref;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class FooTest {
    private Foo instance;

    @BeforeEach
    void setUp() {
        instance = new Foo();
    }

    /*
    В java передача параметров происходит по значению.
    что происходит в методе foo():
    в первый аргумент передается переменная примитивного типа int
    во второй аргумент передается переменная ссылочного типа List.
    Все передается по значению, значит переменная int i передалось значение 5,
    в самом методе переменная i меняется, тоесть ей передалось значение 5 и плюс ее изменение,
    и если обратится к переменой в самом методе например ввывести ее на экран покажет другое ее значение,
    но если обратится к переменной i которая находится вне метода foo(), мы увидим что она не изменилась, осталась 5.
    тоесть внутри метода это уже другая переменая i.

    С переменной ссылочного типа происходит, что передается значение ссылки,
    тоесть ссылка в аргументе метода и ссылка вне метода указывает на один и тот же объект
    и когда мы вызываем метод foo() в объекте list изменится то что мы делали в методе foo().
    Если взять и сделать внутри метода foo(): s = new ArrayList() ,
    тогда ссылка из аргумента будет указывать уже на другой объект
    и в объекте на который указывает list ничего не изменится.
     */

    @Test
    void testFooIntAndList() {
        int i = 5;
        List<String> list = new ArrayList<>();
        instance.foo(i, list);
        assertEquals(5, i);
        assertEquals("d", list.get(0));
    }
}